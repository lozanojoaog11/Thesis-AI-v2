import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { ThesisData } from '../types';
import { Button } from './ui/Button';

interface ManifestoProps {
  thesisData: ThesisData;
  onReset: () => void;
  generatedManifesto?: string | null;
}

const generateManifestoFromData = (data: ThesisData): string => {
  const { finalThesis, businessModels, conventions, truths, jtbd, jtbdDimensions, progressForces } = data;
  
  if (finalThesis.selectedModelIndex === -1) return "Error: No model selected.";

  const selectedModel = businessModels[finalThesis.selectedModelIndex];
  const jtbdSentence = `When ${jtbd.context}, help me to ${jtbd.verb} ${jtbd.object}, so I can ${jtbd.outcome}.`;
  
  // A more robust way to create the thesis statement
  const thesisStatement = finalThesis.productManifesto.thesisStatement || 
    `The market believes that "${conventions[0]?.statement}", but the truth is that [Radical Counter-Hypothesis], and we will be the first to materialize this truth through a [Solution Type] that [Key Flywheel Action], creating an Unfair Advantage based on [Source of Advantage].`;
  
  const productName = finalThesis.productManifesto.name || 'My Idea';

  return `# **UNICORN MVP CODING BLUEPRINT: ${productName}**
*Generated by 60-Second Unicorn AI*

ü¶Ñ **UNICORN SCORE: ${data.unicornScore}/100**

### **<strategic_context>**
**THE MARKET OPPORTUNITY:** ${data.domain}
**YOUR EDGE:** ${data.finalThesis.productManifesto.competitiveMoat}

### **<role_and_goal>**
Voc√™ √© um Desenvolvedor de IA S√™nior 10x, um "artes√£o de c√≥digo" que se especializa em traduzir vis√µes estrat√©gicas em MVPs elegantes, funcionais e autocontidos. Sua miss√£o √© ler este briefing detalhado, que √© o culminar de uma an√°lise estrat√©gica profunda, e gerar o c√≥digo completo para a aplica√ß√£o em um √∫nico arquivo HTML, perfeitamente alinhado com a vis√£o.

### **<strategic_context>**
* **A Dor Latente (A Raz√£o de Existir):** A raiz do problema est√° na necessidade humana fundamental de **${data.humanNeed}**. Isso se manifesta como: ${progressForces.push}.
* **O "Job To Be Done" (A Miss√£o do Usu√°rio):** A miss√£o do usu√°rio √© clara: **${jtbdSentence}**.
  - **Funcionalmente:** ${jtbdDimensions.functional}
  - **Emocionalmente:** ${jtbdDimensions.emotional}
  - **Socialmente:** ${jtbdDimensions.social}
* **O "Segredo" (Nossa Tese de Investimento):** ${thesisStatement}
* **O Flywheel (Como Iremos Vencer):** ${selectedModel.flywheel}

### **<core_ai_magic_explained>**
${finalThesis.productManifesto.coreAiMagic || '(Explica√ß√£o t√©cnica e detalhada da fun√ß√£o central de IA...)'}

### **<mvp_specifications>**
* **User Persona (Nosso Her√≥i):** ${selectedModel.leanCanvas.customerSegments}
* **User Story Principal (O "Aha!" Moment):** "Como um ${selectedModel.leanCanvas.customerSegments}, eu quero ${selectedModel.leanCanvas.solution} para que ${selectedModel.leanCanvas.uniqueValueProposition}."
* **Fluxo de Usu√°rio (A Jornada Passo a Passo):**
  1. O usu√°rio abre a p√°gina e v√™ [descri√ß√£o da tela inicial].
  2. Ele insere [input espec√≠fico] no [componente de UI].
  3. Ele clica no bot√£o com o texto "[texto exato do CTA]".
  4. O resultado aparece, resolvendo o Job To Be Done.
* **Lista de Features (Escopo Inequ√≠voco):**
  * Feature 1: (Descri√ß√£o precisa).
  * Feature 2: (Descri√ß√£o precisa).

### **<technical_stack_and_constraints>**
* **Stack:** HTML, Vanilla JavaScript (ES6+), CSS.
* **Depend√™ncias:** Estritamente NENHUMA.
* **Estrutura do C√≥digo:** √önico arquivo \`index.html\`.

### **<ui_ux_design_principles>**
* **Estilo Visual (A Est√©tica):** Brutalismo funcional. Fundo #101010, Texto #EAEAEA, Destaque #0070F3.
* **Jornada sem Fric√ß√£o:** O menor n√∫mero de cliques poss√≠vel para o "Aha! Moment".

### **<final_output_instructions>**
* **Formato de Sa√≠da:** O bloco de c√≥digo completo para o arquivo \`index.html\`.
* **Qualidade do C√≥digo:** Limpo, bem formatado e extensivamente comentado.
`;
};

const getScoreMessage = (score: number | undefined) => {
  if (score === undefined) return "";
  if (score >= 90) return "üöÄ Potential Unicorn! This idea has exceptional potential.";
  if (score >= 75) return "‚≠ê Strong Potential! This could be your breakthrough idea.";
  if (score >= 60) return "üí° Good Foundation! With refinement, this could work.";
  if (score >= 40) return "üîß Needs Work! Consider pivoting or major adjustments.";
  return "‚ö†Ô∏è  High Risk! This idea may need fundamental changes.";
};

export const ManifestoStep: React.FC<ManifestoProps> = ({ thesisData, onReset, generatedManifesto }) => {
  const { t } = useTranslation();
  const [manifestoText, setManifestoText] = useState('');
  const [copySuccess, setCopySuccess] = useState(false);

  useEffect(() => {
    const finalManifesto = generatedManifesto || generateManifestoFromData(thesisData);
    setManifestoText(finalManifesto);
  }, [thesisData, generatedManifesto]);

  const handleCopy = () => {
    if(!manifestoText) return;
    navigator.clipboard.writeText(manifestoText).then(() => {
        setCopySuccess(true);
        setTimeout(() => setCopySuccess(false), 2000);
    });
  };

  const generateShareText = () => {
    const score = thesisData?.unicornScore || 0;
    const productName = thesisData?.finalThesis?.productManifesto?.name || 'My Idea';
    
    return `ü¶Ñ Just discovered my million-dollar idea "${productName}" scored ${score}/100 on 60-Second Unicorn!\n\nThink your idea scores higher? Get your analysis: [URL]`;
  };
  
  return (
    <div className="animate-fadeIn w-full max-w-4xl space-y-12">
      <div>
        <h1 className="text-4xl font-bold font-sans text-brand-light">{t('manifesto.title')}</h1>
        <p className="text-lg text-gray-400 mt-2">{t('manifesto.description')}</p>
      </div>

      <div className="mb-6 p-6 bg-gradient-to-r from-purple-900 to-blue-900 rounded-lg">
        <div className="text-center">
          <div className="text-4xl font-bold text-white mb-2">
            ü¶Ñ Unicorn Score: {thesisData?.unicornScore || 'Calculating...'}
            <span className="text-lg">/100</span>
          </div>
          <p className="text-purple-200">
            {getScoreMessage(thesisData?.unicornScore)}
          </p>
          <button 
            onClick={() => navigator.clipboard.writeText(generateShareText())}
            className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg"
          >
            üì± Share My Unicorn Score
          </button>
        </div>
      </div>

      <div className="relative">
        <textarea
            readOnly
            className="w-full h-[500px] bg-black/50 font-mono text-brand-light border-2 border-brand-gray rounded-md p-4 text-sm resize-none focus:outline-none focus:ring-2 focus:ring-brand-blue"
            value={manifestoText}
        />
         <Button onClick={handleCopy} className="absolute top-4 right-4">
            {copySuccess ? t('manifesto.copiedButton') : t('manifesto.copyButton')}
        </Button>
      </div>
      
      <div className="text-center pt-8">
        <Button onClick={onReset} variant="secondary">
            {t('manifesto.resetButton')}
        </Button>
      </div>
    </div>
  );
};
